<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
    <head>
        <meta http-equiv="Content-type" content="text/html;charset=UTF-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
        <title>CWRC-Writer</title>
        
        <script type="text/javascript" src="js/config.js"></script>
        <script type="text/javascript" src="js/lib/require/require.js"></script>
        
        <script type="text/javascript" src="js/layout.js"></script>

        <link type="text/css" rel="stylesheet" href="css/style.css" />
        <link type="text/css" rel="stylesheet" href="css/islandora_style.css" />
        
        <link type="text/css" rel="stylesheet" href="smoothness/jquery-ui-1.10.4.custom.css" />
        <link type="text/css" rel="stylesheet" href="css/layout-default-latest.css" />
        <link type="text/css" rel="stylesheet" href="js/lib/snippet/jquery.snippet.css" />
        
        <link type="text/css" rel="stylesheet" href="js/lib/bootstrap/bootstrap.css" />
        <link type="text/css" rel="stylesheet" href="js/cwrcDialogs/css/datepicker.css" />
        <link type="text/css" rel="stylesheet" href="js/lib/fonts/font-awesome/css/font-awesome.min.css" />
        <link type="text/css" rel="stylesheet" href="js/cwrcDialogs/css/cD.css" />

        <script type="text/javascript">
            require.config({baseUrl: 'js'});
            
            // and the 'jquery-private' module, in the
            // jquery-private.js file:
            define('jquery-private', ['jquery'], function ($) {
                return $.noConflict(true);
            });
    
            require(['jquery', 'knockout'], function($, knockout) {
                window.ko = knockout; // requirejs shim isn't working for knockout
                
                require(['writer',
                         'delegator',
                         'jquery.layout',
                         'jquery.tablayout'
                ], function(Writer, Delegator) {
                    $(function() {
                        cwrcWriterInit.call(window, $, Writer, Delegator);
                    });
                });
            });
            
            function cwrcWriterInit($, Writer, Delegator) {
                cwrc_params = {};
                
                writer = null;
                
                function doInit(config) {
                    config.delegator = Delegator;
                    writer = new Writer(config);
                    writer.init('editor');
                    writer.event('writerInitialized').subscribe(function(writer) {
                        // load modules then do the setup
                        require(['modules/entitiesList','modules/relations','modules/selection',
                                 'modules/structureTree','modules/validation'
                        ], function(EntitiesList, Relations, Selection, StructureTree, Validation) {
                            setupLayoutAndModules(writer, EntitiesList, Relations, Selection, StructureTree, Validation);
                            writer.fileManager.loadInitialDocument(window.location.hash);
                        });
                    });
                }
                
                (function() {
                    var configXHR = $.ajax({url: 'js/writerConfig.json', dataType: 'json'});
                    var projectXHR = $.ajax({url: 'http://apps.testing.cwrc.ca/editor/documents/info/projectname'});
                    $.when(
                        configXHR,
                        projectXHR
                    ).then(function(config, project) {
                        config = config[0];
                        project = project[0];
                        config.project = project;
                        config.cwrcRootUrl = window.location.protocol+'//'+window.location.host+window.location.pathname.replace(window.location.pathname.split('/').pop(),'');
                        doInit(config);
                    },function(xhr) {
                        if (configXHR.state() === 'resolved') {
                            var config = $.parseJSON(configXHR.responseText);
                            config.cwrcRootUrl = window.location.protocol+'//'+window.location.host+window.location.pathname.replace(window.location.pathname.split('/').pop(),'');
                            doInit(config);
                        } else {
                            alert('Error loading writerConfig.json');
                        }
                    });
                }());
            };
        </script>
    </head>
<body>
<div id="cwrc_loadingMask"><div>Loading CWRC-Writer</div></div>
<div id="cwrc_wrapper">
    <div id="cwrc_header" class="cwrc ui-layout-north">
        <h1>CWRC-Writer v0.8</h1>
        <div id="headerButtons">
        </div>
    </div>
    <div class="cwrc ui-layout-west">
        <div id="westTabs" class="tabs">
            <ul>
                <li><a href="#entities">Entities</a></li>
                <li><a href="#structure">Markup</a></li>
                <li><a href="#relations">Relations</a></li>
                <!-- li id="annotation_tab"><a href="#image-annotations">Image Annotations</a></li -->
            </ul>
            <div id="westTabsContent" class="ui-layout-content">
                <!-- div id="image-annotations">
                    <div id="comment_annos_block"></div>
                </div -->
            </div>
        </div>
    </div>
    <div id="cwrc_main" class="ui-layout-center">
        <div class="ui-layout-center">
            <form method="post" action="">
                <textarea id="editor" name="editor" class="tinymce"></textarea>
            </form>
        </div>
        <div class="cwrc ui-layout-south">
            <div id="southTabs" class="tabs">
                <ul>
                    <li><a href="#validation">Validation</a></li>
                    <li><a href="#selection">Selection</a></li>
                </ul>
                <div id="southTabsContent" class="ui-layout-content"></div>
            </div>
        </div>
    </div>
</div>
</body>
</html>